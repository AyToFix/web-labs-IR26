{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst PORT = process.env.PORT || 5000;\napp.use(cors());\napp.use(bodyParser.json());\nconst printers = [{\n  id: 1,\n  name: 'HP LaserJet M141cw',\n  description: 'Better version of M111cw, new features.',\n  price: '$415',\n  image: '/print.png',\n  size: 'Large',\n  color: 'White',\n  type: 'Laser'\n}, {\n  id: 2,\n  name: 'HP LaserJet M111cw',\n  description: 'Good choice for average user',\n  price: '$500',\n  image: '/print2.png',\n  size: 'Medium',\n  color: 'White',\n  type: 'Laser'\n}, {\n  id: 3,\n  name: 'HP InkJet M110w',\n  description: 'Best value for home and office use.',\n  price: '$400',\n  image: '/print3.png',\n  size: 'Small',\n  color: 'Black',\n  type: 'Inkjet'\n}];\napp.get('/api/printers', (req, res) => {\n  const {\n    size,\n    color,\n    type\n  } = req.query;\n  let filteredPrinters = printers;\n  if (size) {\n    filteredPrinters = filteredPrinters.filter(printer => printer.size === size);\n  }\n  if (color) {\n    filteredPrinters = filteredPrinters.filter(printer => printer.color === color);\n  }\n  if (type) {\n    filteredPrinters = filteredPrinters.filter(printer => printer.type === type);\n  }\n  res.json(filteredPrinters);\n});\napp.get('/api/printers/:id', (req, res) => {\n  const {\n    id\n  } = req.params;\n  const printer = printers.find(p => p.id === parseInt(id));\n  if (printer) {\n    res.json(printer);\n  } else {\n    res.status(404).send('Item not found');\n  }\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","bodyParser","app","PORT","process","env","use","json","printers","id","name","description","price","image","size","color","type","get","req","res","query","filteredPrinters","filter","printer","params","find","p","parseInt","status","send","listen","console","log"],"sources":["C:/Users/danil/OneDrive/Desktop/WEB/homepage9/src/api.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\nconst printers = [\r\n    { id: 1, name: 'HP LaserJet M141cw', description: 'Better version of M111cw, new features.', price: '$415', image: '/print.png', size: 'Large', color: 'White', type: 'Laser' },\r\n    { id: 2, name: 'HP LaserJet M111cw', description: 'Good choice for average user', price: '$500', image: '/print2.png', size: 'Medium', color: 'White', type: 'Laser' },\r\n    { id: 3, name: 'HP InkJet M110w', description: 'Best value for home and office use.', price: '$400', image: '/print3.png', size: 'Small', color: 'Black', type: 'Inkjet' }\r\n];\r\n\r\napp.get('/api/printers', (req, res) => {\r\n    const { size, color, type } = req.query;\r\n    let filteredPrinters = printers;\r\n\r\n    if (size) {\r\n        filteredPrinters = filteredPrinters.filter(printer => printer.size === size);\r\n    }\r\n\r\n    if (color) {\r\n        filteredPrinters = filteredPrinters.filter(printer => printer.color === color);\r\n    }\r\n\r\n    if (type) {\r\n        filteredPrinters = filteredPrinters.filter(printer => printer.type === type);\r\n    }\r\n\r\n    res.json(filteredPrinters);\r\n});\r\n\r\napp.get('/api/printers/:id', (req, res) => {\r\n    const { id } = req.params;\r\n    const printer = printers.find(p => p.id === parseInt(id));\r\n\r\n    if (printer) {\r\n        res.json(printer);\r\n    } else {\r\n        res.status(404).send('Item not found');\r\n    }\r\n});\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on port ${PORT}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEzC,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AAErCD,GAAG,CAACI,GAAG,CAACN,IAAI,CAAC,CAAC,CAAC;AACfE,GAAG,CAACI,GAAG,CAACL,UAAU,CAACM,IAAI,CAAC,CAAC,CAAC;AAE1B,MAAMC,QAAQ,GAAG,CACb;EAAEC,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,oBAAoB;EAAEC,WAAW,EAAE,yCAAyC;EAAEC,KAAK,EAAE,MAAM;EAAEC,KAAK,EAAE,YAAY;EAAEC,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE,OAAO;EAAEC,IAAI,EAAE;AAAQ,CAAC,EAC/K;EAAEP,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,oBAAoB;EAAEC,WAAW,EAAE,8BAA8B;EAAEC,KAAK,EAAE,MAAM;EAAEC,KAAK,EAAE,aAAa;EAAEC,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE,OAAO;EAAEC,IAAI,EAAE;AAAQ,CAAC,EACtK;EAAEP,EAAE,EAAE,CAAC;EAAEC,IAAI,EAAE,iBAAiB;EAAEC,WAAW,EAAE,qCAAqC;EAAEC,KAAK,EAAE,MAAM;EAAEC,KAAK,EAAE,aAAa;EAAEC,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE,OAAO;EAAEC,IAAI,EAAE;AAAS,CAAC,CAC7K;AAEDd,GAAG,CAACe,GAAG,CAAC,eAAe,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACnC,MAAM;IAAEL,IAAI;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGE,GAAG,CAACE,KAAK;EACvC,IAAIC,gBAAgB,GAAGb,QAAQ;EAE/B,IAAIM,IAAI,EAAE;IACNO,gBAAgB,GAAGA,gBAAgB,CAACC,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACT,IAAI,KAAKA,IAAI,CAAC;EAChF;EAEA,IAAIC,KAAK,EAAE;IACPM,gBAAgB,GAAGA,gBAAgB,CAACC,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACR,KAAK,KAAKA,KAAK,CAAC;EAClF;EAEA,IAAIC,IAAI,EAAE;IACNK,gBAAgB,GAAGA,gBAAgB,CAACC,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACP,IAAI,KAAKA,IAAI,CAAC;EAChF;EAEAG,GAAG,CAACZ,IAAI,CAACc,gBAAgB,CAAC;AAC9B,CAAC,CAAC;AAEFnB,GAAG,CAACe,GAAG,CAAC,mBAAmB,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACvC,MAAM;IAAEV;EAAG,CAAC,GAAGS,GAAG,CAACM,MAAM;EACzB,MAAMD,OAAO,GAAGf,QAAQ,CAACiB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACjB,EAAE,KAAKkB,QAAQ,CAAClB,EAAE,CAAC,CAAC;EAEzD,IAAIc,OAAO,EAAE;IACTJ,GAAG,CAACZ,IAAI,CAACgB,OAAO,CAAC;EACrB,CAAC,MAAM;IACHJ,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,gBAAgB,CAAC;EAC1C;AACJ,CAAC,CAAC;AAEF3B,GAAG,CAAC4B,MAAM,CAAC3B,IAAI,EAAE,MAAM;EACnB4B,OAAO,CAACC,GAAG,CAAC,6BAA6B7B,IAAI,EAAE,CAAC;AACpD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}